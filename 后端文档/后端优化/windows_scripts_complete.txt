REM ==================== start-dev.bat ====================
REM 启动开发服务器 - 双击运行此文件
@echo off
chcp 65001 >nul
color 0A

echo.
echo ========================================
echo 🚀 启动 IEclub 开发服务器
echo ========================================
echo.

REM 检查 node_modules
if not exist "node_modules" (
    color 0E
    echo ⚠️  未找到 node_modules 目录
    echo.
    echo 正在安装依赖...
    call npm install
    if %ERRORLEVEL% NEQ 0 (
        color 0C
        echo ❌ 依赖安装失败
        pause
        exit /b 1
    )
    echo.
)

REM 检查 .env 文件
if not exist ".env" (
    color 0E
    echo ⚠️  未找到 .env 文件
    echo.
    if exist ".env.example" (
        echo 正在复制 .env.example 到 .env...
        copy .env.example .env >nul
        echo ✅ .env 文件已创建
        echo.
        echo ⚠️  请编辑 .env 文件，配置数据库密码！
        echo 按任意键继续...
        pause >nul
    ) else (
        echo ❌ 也未找到 .env.example
        echo 请手动创建 .env 文件
        pause
        exit /b 1
    )
)

REM 检查数据库连接
echo 正在检查数据库连接...
for /f "tokens=2 delims==" %%i in ('findstr "DB_PASSWORD" .env') do set DB_PASS=%%i
for /f "tokens=2 delims==" %%i in ('findstr "DB_NAME" .env') do set DB_NAME=%%i

set PGPASSWORD=%DB_PASS%
psql -U postgres -h localhost -d %DB_NAME% -c "SELECT 1;" >nul 2>&1

if %ERRORLEVEL% EQU 0 (
    echo ✅ 数据库连接正常
) else (
    color 0E
    echo ⚠️  数据库连接失败
    echo.
    echo 可能的原因：
    echo   1. PostgreSQL 未启动
    echo   2. 数据库 %DB_NAME% 不存在
    echo   3. .env 中的密码不正确
    echo.
    set /p CREATE_DB="是否尝试创建数据库? (y/N): "
    if /i "%CREATE_DB%"=="y" (
        psql -U postgres -h localhost -c "CREATE DATABASE %DB_NAME%;" 2>nul
        if %ERRORLEVEL% EQU 0 (
            echo ✅ 数据库创建成功
        ) else (
            echo ❌ 数据库创建失败，请手动创建
        )
    )
)

echo.
echo ========================================
echo 🚀 正在启动服务器...
echo ========================================
echo.
echo 💡 提示：
echo   - 服务器地址: http://localhost:5000
echo   - 健康检查: http://localhost:5000/health
echo   - 按 Ctrl+C 停止服务器
echo.
echo ========================================
echo.

REM 启动开发服务器
npm run dev


REM ==================== test-api.bat ====================
REM API测试脚本 - 双击运行此文件
@echo off
chcp 65001 >nul
color 0B

echo.
echo ========================================
echo 🧪 IEclub API 接口测试
echo ========================================
echo.

REM 检查服务器是否运行
curl -s http://localhost:5000/health >nul 2>&1
if %ERRORLEVEL% NEQ 0 (
    color 0C
    echo ❌ 服务器未运行！
    echo.
    echo 请先运行 start-dev.bat 启动服务器
    pause
    exit /b 1
)

echo ✅ 服务器正在运行
echo.

REM 定义测试邮箱
set TEST_EMAIL=test_%RANDOM%@sustech.edu.cn
set TEST_PASSWORD=password123
set TEST_USERNAME=测试用户%RANDOM%

echo ========================================
echo 测试 1/5: 健康检查
echo ========================================
curl -s http://localhost:5000/health
echo.
echo.

echo ========================================
echo 测试 2/5: 用户注册
echo ========================================
echo 邮箱: %TEST_EMAIL%
echo 密码: %TEST_PASSWORD%
echo.

curl -X POST http://localhost:5000/api/v1/auth/register ^
  -H "Content-Type: application/json" ^
  -d "{\"email\":\"%TEST_EMAIL%\",\"password\":\"%TEST_PASSWORD%\",\"username\":\"%TEST_USERNAME%\",\"studentId\":\"12012345\"}" ^
  -o register_response.json

echo 响应已保存到 register_response.json
type register_response.json
echo.
echo.

REM 提取token（简化版，使用PowerShell）
for /f "delims=" %%i in ('powershell -Command "(Get-Content register_response.json | ConvertFrom-Json).token"') do set TOKEN=%%i

if "%TOKEN%"=="" (
    color 0C
    echo ❌ 注册失败，未获取到token
    echo.
    pause
    exit /b 1
)

echo ✅ 注册成功，Token: %TOKEN:~0,20%...
echo.

echo ========================================
echo 测试 3/5: 用户登录
echo ========================================

curl -X POST http://localhost:5000/api/v1/auth/login ^
  -H "Content-Type: application/json" ^
  -d "{\"email\":\"%TEST_EMAIL%\",\"password\":\"%TEST_PASSWORD%\"}"

echo.
echo.

echo ========================================
echo 测试 4/5: 获取当前用户信息
echo ========================================

curl -X GET http://localhost:5000/api/v1/auth/me ^
  -H "Authorization: Bearer %TOKEN%"

echo.
echo.

echo ========================================
echo 测试 5/5: 创建帖子
echo ========================================

curl -X POST http://localhost:5000/api/v1/posts ^
  -H "Content-Type: application/json" ^
  -H "Authorization: Bearer %TOKEN%" ^
  -d "{\"title\":\"测试帖子\",\"content\":\"这是一个测试内容\",\"category\":\"学术\",\"tags\":[\"测试\",\"API\"]}"

echo.
echo.

echo ========================================
echo ✅ 测试完成！
echo ========================================
echo.
echo 清理临时文件...
del register_response.json 2>nul
echo.
echo 💡 提示：
echo   - 所有接口测试通过
echo   - Token: %TOKEN:~0,30%...
echo   - 可以用此Token继续测试其他接口
echo.

pause


REM ==================== create-gitkeep.bat ====================
REM 创建.gitkeep占位文件 - 双击运行此文件
@echo off
chcp 65001 >nul

echo.
echo ========================================
echo 📁 创建目录占位文件
echo ========================================
echo.

REM 创建目录（如果不存在）
if not exist "logs" mkdir logs
if not exist "uploads" mkdir uploads
if not exist "tests" mkdir tests

REM 创建.gitkeep文件
type nul > logs\.gitkeep
type nul > uploads\.gitkeep
type nul > tests\.gitkeep

echo ✅ logs\.gitkeep
echo ✅ uploads\.gitkeep
echo ✅ tests\.gitkeep
echo.
echo ========================================
echo ✅ 占位文件创建完成！
echo ========================================
echo.
echo 📋 说明：
echo   .gitkeep 是空文件，用于让Git追踪空目录
echo   这样即使目录是空的，也会被提交到Git仓库
echo.
pause


REM ==================== setup-all.bat ====================
REM 一键完整设置 - 双击运行此文件
@echo off
chcp 65001 >nul
color 0A

echo.
echo ========================================
echo 🚀 IEclub 一键完整设置（Windows）
echo ========================================
echo.

REM 第1步：创建目录结构
echo [1/6] 📁 创建项目目录结构...
if not exist "src\config" mkdir src\config
if not exist "src\middleware" mkdir src\middleware
if not exist "src\models" mkdir src\models
if not exist "src\controllers" mkdir src\controllers
if not exist "src\routes" mkdir src\routes
if not exist "src\services" mkdir src\services
if not exist "src\utils" mkdir src\utils
if not exist "src\db\migrations" mkdir src\db\migrations
if not exist "src\db\seeds" mkdir src\db\seeds
if not exist "logs" mkdir logs
if not exist "uploads" mkdir uploads
if not exist "tests" mkdir tests
echo ✅ 目录创建完成
echo.

REM 第2步：创建占位文件
echo [2/6] 📝 创建占位文件...
type nul > logs\.gitkeep
type nul > uploads\.gitkeep
type nul > tests\.gitkeep
echo ✅ 占位文件创建完成
echo.

REM 第3步：检查Node.js
echo [3/6] 🔍 检查开发环境...
where node >nul 2>nul
if %ERRORLEVEL% NEQ 0 (
    color 0C
    echo ❌ 未安装 Node.js
    echo.
    echo 请访问 https://nodejs.org 下载安装
    pause
    exit /b 1
)
for /f "tokens=*" %%i in ('node -v') do echo ✅ Node.js %%i
echo.

REM 第4步：安装依赖
echo [4/6] 📦 安装项目依赖...
if exist "package.json" (
    call npm install
    if %ERRORLEVEL% NEQ 0 (
        color 0C
        echo ❌ 依赖安装失败
        pause
        exit /b 1
    )
    echo ✅ 依赖安装成功
) else (
    echo ⚠️  未找到 package.json，跳过
)
echo.

REM 第5步：配置环境变量
echo [5/6] ⚙️  配置环境变量...
if not exist ".env" (
    if exist ".env.example" (
        copy .env.example .env >nul
        echo ✅ .env 文件已创建
        echo.
        set /p DB_PASS="请输入 PostgreSQL 密码: "
        powershell -Command "(Get-Content .env) -replace 'DB_PASSWORD=.*', 'DB_PASSWORD=%DB_PASS%' | Set-Content .env"
        echo ✅ 数据库密码已配置
    ) else (
        echo ⚠️  未找到 .env.example
    )
) else (
    echo ✅ .env 文件已存在
)
echo.

REM 第6步：创建数据库
echo [6/6] 🗄️  创建数据库...
for /f "tokens=2 delims==" %%i in ('findstr "DB_PASSWORD" .env') do set DB_PASS=%%i
for /f "tokens=2 delims==" %%i in ('findstr "DB_NAME" .env') do set DB_NAME=%%i

set PGPASSWORD=%DB_PASS%
psql -U postgres -h localhost -c "CREATE DATABASE %DB_NAME%;" 2>nul

if %ERRORLEVEL% EQU 0 (
    echo ✅ 数据库 %DB_NAME% 创建成功
) else (
    echo ⚠️  数据库可能已存在
)
echo.

echo ========================================
echo ✨ 设置完成！
echo ========================================
echo.
echo 📋 接下来的步骤：
echo.
echo   1. 复制所有代码文件到对应目录
echo   2. 双击 start-dev.bat 启动服务器
echo   3. 双击 test-api.bat 测试接口
echo.
echo 💡 提示：
echo   - 所有批处理文件都在项目根目录
echo   - 双击即可运行，无需命令行
echo.
pause


REM ==================== clean-project.bat ====================
REM 清理项目 - 双击运行此文件
@echo off
chcp 65001 >nul

echo.
echo ========================================
echo 🧹 清理项目
echo ========================================
echo.
echo 将删除：
echo   - node_modules（依赖包）
echo   - package-lock.json（锁定文件）
echo   - logs\*.log（日志文件）
echo   - uploads\*（上传的文件，保留.gitkeep）
echo.

set /p CONFIRM="确定要清理吗? (y/N): "

if /i "%CONFIRM%"=="y" (
    echo.
    echo 正在清理...
    
    if exist "node_modules" (
        echo 删除 node_modules...
        rmdir /s /q node_modules
    )
    
    if exist "package-lock.json" (
        echo 删除 package-lock.json...
        del /q package-lock.json
    )
    
    if exist "logs" (
        echo 清理日志文件...
        del /q logs\*.log 2>nul
    )
    
    if exist "uploads" (
        echo 清理上传文件...
        for /d %%d in (uploads\*) do rmdir /s /q "%%d" 2>nul
        del /q uploads\*.* 2>nul
        type nul > uploads\.gitkeep
    )
    
    echo.
    echo ✅ 清理完成！
    echo.
    echo 下一步：运行 npm install 重新安装依赖
) else (
    echo 操作已取消
)
echo.
pause
